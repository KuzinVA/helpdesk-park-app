const https = require('https');

const BOT_TOKEN = '8465643840:AAEWFjl1h-EY3150NgihSG2HAaVYLci14Rk';
const INVITE_LINK = 'https://t.me/+grmdzW2hrEUyN2Qy';

console.log('üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ –ø–æ username...');
console.log(`üîë –¢–æ–∫–µ–Ω: ${BOT_TOKEN.substring(0, 10)}...`);
console.log(`üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: ${INVITE_LINK}`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API
function makeRequest(method, data = null) {
    return new Promise((resolve, reject) => {
        const postData = data ? JSON.stringify(data) : '';
        
        const options = {
            hostname: 'api.telegram.org',
            port: 443,
            path: `/bot${BOT_TOKEN}/${method}`,
            method: data ? 'POST' : 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };

        const req = https.request(options, (res) => {
            let responseData = '';
            
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(responseData);
                    if (result.ok) {
                        resolve(result);
                    } else {
                        reject(new Error(`Telegram API error: ${result.description}`));
                    }
                } catch (error) {
                    reject(new Error(`JSON parse error: ${error.message}`));
                }
            });
        });

        req.on('error', (error) => {
            reject(new Error(`Request error: ${error.message}`));
        });

        if (postData) {
            req.write(postData);
        }
        
        req.end();
    });
}

// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –ø–æ username
async function getChatByUsername(username) {
    try {
        console.log(`üîç –ò—â–µ–º —á–∞—Ç –ø–æ username: @${username}`);
        const response = await makeRequest(`getChat?chat_id=@${username}`);
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:', response.result);
        return response.result;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–∞—Ç–∞ @${username}:`, error.message);
        throw error;
    }
}

// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –ø–æ username –±–µ–∑ @
async function getChatByUsernameWithoutAt(username) {
    try {
        console.log(`üîç –ò—â–µ–º —á–∞—Ç –ø–æ username –±–µ–∑ @: ${username}`);
        const response = await makeRequest(`getChat?chat_id=${username}`);
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:', response.result);
        return response.result;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–∞—Ç–∞ ${username}:`, error.message);
        throw error;
    }
}

// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –ø–æ username —Å +
async function getChatByUsernameWithPlus(username) {
    try {
        console.log(`üîç –ò—â–µ–º —á–∞—Ç –ø–æ username —Å +: +${username}`);
        const response = await makeRequest(`getChat?chat_id=+${username}`);
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:', response.result);
        return response.result;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–∞—Ç–∞ +${username}:`, error.message);
        throw error;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —á–∞—Ç–∞...\n');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ invite link
        const match = INVITE_LINK.match(/t\.me\/\+([a-zA-Z0-9]+)/);
        if (match) {
            const username = match[1];
            console.log(`üìù –ò–∑–≤–ª–µ—á–µ–Ω username: ${username}`);
            console.log(`üîó –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/+${username}\n`);
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
            const searchMethods = [
                { name: '—Å @', method: () => getChatByUsername(username) },
                { name: '–±–µ–∑ @', method: () => getChatByUsernameWithoutAt(username) },
                { name: '—Å +', method: () => getChatByUsernameWithPlus(username) }
            ];
            
            for (const searchMethod of searchMethods) {
                try {
                    console.log(`\nüîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ ${searchMethod.name}...`);
                    const chat = await searchMethod.method();
                    
                    if (chat) {
                        console.log(`\nüéØ –ß–∞—Ç –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥–æ–º "${searchMethod.name}"!`);
                        console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${chat.title}`);
                        console.log(`üÜî Chat ID: ${chat.id}`);
                        console.log(`üë• –¢–∏–ø: ${chat.type}`);
                        console.log(`üîó Username: ${chat.username ? '@' + chat.username : '–ù–µ—Ç'}`);
                        
                        if (chat.type === 'supergroup' || chat.type === 'group') {
                            console.log(`\nüí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:`);
                            console.log(`curl "http://localhost:3001/api/chat-members?chat_id=${chat.id}"`);
                            
                            console.log(`\nüöÄ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ Chat API:`);
                            console.log(`node chat-api.js`);
                        }
                        
                        return;
                    }
                } catch (error) {
                    console.log(`‚ùå –ú–µ—Ç–æ–¥ "${searchMethod.name}" –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
                }
            }
            
            console.log('\n‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
            console.log('\nüìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.log('1. –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç');
            console.log('2. –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            console.log('3. –ß–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤');
            console.log('4. Username —á–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è');
            
        } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å username –∏–∑ invite link');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);
