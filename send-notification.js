const https = require('https');

const BOT_TOKEN = '8465643840:AAEWFjl1h-EY3150NgihSG2HAaVYLci14Rk';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API
function makeRequest(method, data = null) {
    return new Promise((resolve, reject) => {
        const postData = data ? JSON.stringify(data) : '';
        
        const options = {
            hostname: 'api.telegram.org',
            port: 443,
            path: `/bot${BOT_TOKEN}/${method}`,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };

        const req = https.request(options, (res) => {
            let responseData = '';
            
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(responseData);
                    if (result.ok) {
                        resolve(result.result);
                    } else {
                        reject(new Error(`Telegram API error: ${result.description}`));
                    }
                } catch (error) {
                    reject(new Error(`Failed to parse response: ${error.message}`));
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (postData) {
            req.write(postData);
        }
        
        req.end();
    });
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendNotification(userId, message, parseMode = 'HTML') {
    try {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}...`);
        const result = await makeRequest('sendMessage', {
            chat_id: userId,
            text: message,
            parse_mode: parseMode,
            disable_web_page_preview: true
        });
        
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        return result;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
        return null;
    }
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É
async function sendAssignmentNotification(assigneeId, ticketData) {
    const message = `üîî <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å!</b>

üìã <b>–ó–∞—è–≤–∫–∞:</b> ${ticketData.title}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticketData.description}
üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${getCategoryText(ticketData.category)}
‚ö° <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${getPriorityText(ticketData.priority)}
üë§ <b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> ${ticketData.createdBy}
üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> ${formatDate(ticketData.createdAt)}

üí° <i>–ó–∞—è–≤–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å!</i>`;

    return await sendNotification(assigneeId, message);
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
async function sendStatusUpdateNotification(assigneeId, ticketData, newStatus) {
    const message = `üîÑ <b>–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>

üìã <b>–ó–∞—è–≤–∫–∞:</b> ${ticketData.title}
üÜï <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> ${getStatusText(newStatus)}
üë§ <b>–û–±–Ω–æ–≤–∏–ª:</b> ${ticketData.updatedBy || '–°–∏—Å—Ç–µ–º–∞'}
üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> ${formatDate(ticketData.updatedAt)}

üí° <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏</i>`;

    return await sendNotification(assigneeId, message);
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞—è–≤–∫–µ
async function sendCommentNotification(assigneeId, ticketData, comment, commentAuthor) {
    const message = `üí¨ <b>–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ!</b>

üìã <b>–ó–∞—è–≤–∫–∞:</b> ${ticketData.title}
üí≠ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${comment}
üë§ <b>–ê–≤—Ç–æ—Ä:</b> ${commentAuthor}
üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> ${formatDate(new Date())}

üí° <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</i>`;

    return await sendNotification(assigneeId, message);
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function getStatusText(status) {
    const statusMap = {
        'new': 'üÜï –ù–æ–≤—ã–π',
        'in-progress': 'üîÑ –í —Ä–∞–±–æ—Ç–µ',
        'resolved': '‚úÖ –†–µ—à–µ–Ω–æ',
        'closed': 'üîí –ó–∞–∫—Ä—ã—Ç–æ'
    };
    return statusMap[status] || status;
}

function getPriorityText(priority) {
    const priorityMap = {
        'low': 'üü¢ –ù–∏–∑–∫–∏–π',
        'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π',
        'high': 'üü† –í—ã—Å–æ–∫–∏–π',
        'critical': 'üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'
    };
    return priorityMap[priority] || priority;
}

function getCategoryText(category) {
    const categoryMap = {
        'technical': 'üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        'billing': 'üí∞ –ë–∏–ª–ª–∏–Ω–≥',
        'feature': '‚ú® –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª',
        'bug': 'üêõ –û—à–∏–±–∫–∞',
        'other': 'üìù –î—Ä—É–≥–æ–µ'
    };
    return categoryMap[category] || category;
}

function formatDate(dateString) {
    return new Date(dateString).toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
async function testNotifications() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...\n');
    
    const testTicket = {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞',
        description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        category: 'technical',
        priority: 'high',
        createdBy: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    };
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏:');
    await sendAssignmentNotification('123456789', testTicket);
    
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:');
    await sendStatusUpdateNotification('123456789', testTicket, 'in-progress');
    
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:');
    await sendCommentNotification('123456789', testTicket, '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ—Ä');
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Helpdesk Park\n');
    
    if (process.argv.length > 2) {
        const command = process.argv[2];
        
        switch (command) {
            case 'assign':
                if (process.argv.length < 5) {
                    console.log('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node send-notification.js assign USER_ID TICKET_TITLE');
                    return;
                }
                const userId = process.argv[3];
                const ticketTitle = process.argv[4];
                const ticketData = {
                    title: ticketTitle,
                    description: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏',
                    category: 'technical',
                    priority: 'medium',
                    createdBy: '–°–∏—Å—Ç–µ–º–∞',
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                };
                await sendAssignmentNotification(userId, ticketData);
                break;
                
            case 'status':
                if (process.argv.length < 6) {
                    console.log('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node send-notification.js status USER_ID TICKET_TITLE NEW_STATUS');
                    return;
                }
                const statusUserId = process.argv[3];
                const statusTicketTitle = process.argv[4];
                const newStatus = process.argv[5];
                const statusTicketData = {
                    title: statusTicketTitle,
                    description: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏',
                    category: 'technical',
                    priority: 'medium',
                    createdBy: '–°–∏—Å—Ç–µ–º–∞',
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                };
                await sendStatusUpdateNotification(statusUserId, statusTicketData, newStatus);
                break;
                
            case 'comment':
                if (process.argv.length < 6) {
                    console.log('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node send-notification.js comment USER_ID TICKET_TITLE COMMENT_TEXT');
                    return;
                }
                const commentUserId = process.argv[3];
                const commentTicketTitle = process.argv[4];
                const commentText = process.argv[5];
                const commentTicketData = {
                    title: commentTicketTitle,
                    description: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏',
                    category: 'technical',
                    priority: 'medium',
                    createdBy: '–°–∏—Å—Ç–µ–º–∞',
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                };
                await sendCommentNotification(commentUserId, commentTicketData, commentText, '–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ—Ä');
                break;
                
            case 'test':
                await testNotifications();
                break;
                
            default:
                console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
                console.log('  assign USER_ID TICKET_TITLE - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏');
                console.log('  status USER_ID TICKET_TITLE NEW_STATUS - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
                console.log('  comment USER_ID TICKET_TITLE COMMENT_TEXT - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏');
                console.log('  test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        }
    } else {
        console.log('üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:');
        console.log('1. node send-notification.js assign USER_ID TICKET_TITLE');
        console.log('2. node send-notification.js status USER_ID TICKET_TITLE NEW_STATUS');
        console.log('3. node send-notification.js comment USER_ID TICKET_TITLE COMMENT_TEXT');
        console.log('4. node send-notification.js test');
        console.log('\nüí° –ó–∞–º–µ–Ω–∏—Ç–µ USER_ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main().catch(console.error);
}

module.exports = {
    sendNotification,
    sendAssignmentNotification,
    sendStatusUpdateNotification,
    sendCommentNotification
};
