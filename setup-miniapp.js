const https = require('https');

const BOT_TOKEN = '8465643840:AAEWFjl1h-EY3150NgihSG2HAaVYLci14Rk';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API
function makeRequest(method, data = null) {
    return new Promise((resolve, reject) => {
        const postData = data ? JSON.stringify(data) : '';
        
        const options = {
            hostname: 'api.telegram.org',
            port: 443,
            path: `/bot${BOT_TOKEN}/${method}`,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };

        const req = https.request(options, (res) => {
            let responseData = '';
            
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(responseData);
                    if (result.ok) {
                        resolve(result.result);
                    } else {
                        reject(new Error(`Telegram API error: ${result.description}`));
                    }
                } catch (error) {
                    reject(new Error(`Failed to parse response: ${error.message}`));
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (postData) {
            req.write(postData);
        }
        
        req.end();
    });
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function setupStartCommand() {
    try {
        console.log('üöÄ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start...');
        
        // –°–æ–∑–¥–∞–µ–º inline keyboard —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const keyboard = {
            inline_keyboard: [
                [
                    {
                        text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park',
                        web_app: {
                            url: 'http://localhost:8080'
                        }
                    }
                ],
                [
                    {
                        text: 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏',
                        callback_data: 'my_tickets'
                    },
                    {
                        text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É',
                        callback_data: 'create_ticket'
                    }
                ],
                [
                    {
                        text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                        callback_data: 'stats'
                    },
                    {
                        text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
                        callback_data: 'profile'
                    }
                ],
                [
                    {
                        text: '‚ùì –ü–æ–º–æ—â—å',
                        callback_data: 'help'
                    }
                ]
            ]
        };

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É start
        await makeRequest('setMyCommands', {
            commands: [
                {
                    command: 'start',
                    description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park'
                }
            ]
        });

        console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        return keyboard;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥—ã start:', error.message);
        throw error;
    }
}

// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async function createStartHandler() {
    try {
        console.log('üìù –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start...');
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ webhook –∏–ª–∏ long polling
        
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞:', error.message);
    }
}

// –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
async function createMenuCommands() {
    try {
        console.log('üçî –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥...');
        
        const menuButton = {
            type: 'commands',
            text: '–ú–µ–Ω—é Helpdesk'
        };
        
        await makeRequest('setChatMenuButton', { menu_button: menuButton });
        console.log('‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é:', error.message);
    }
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é
async function setMenuCommands() {
    try {
        console.log('üìã –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é...');
        
        const commands = [
            {
                command: 'start',
                description: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park'
            },
            {
                command: 'tickets',
                description: 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫'
            },
            {
                command: 'create',
                description: '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'
            },
            {
                command: 'stats',
                description: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
            },
            {
                command: 'profile',
                description: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'
            },
            {
                command: 'help',
                description: '‚ùì –ü–æ–º–æ—â—å'
            }
        ];
        
        await makeRequest('setMyCommands', { commands });
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é:', error.message);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function setupMiniApp() {
    try {
        console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Helpdesk Park...\n');
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
        const startKeyboard = await setupStartCommand();
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await createStartHandler();
        
        // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
        await createMenuCommands();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
        await setMenuCommands();
        
        console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        console.log('\nüì± –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:');
        console.log('1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å /start –±–æ—Ç—É');
        console.log('2. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park"');
        console.log('3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é');
        
        console.log('\nüîó –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram: @helpdeskParkApp_bot');
        console.log('2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
        console.log('3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        console.log('4. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é');
        
        console.log('\nüåê URL –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: http://localhost:3000');
        console.log('‚ö†Ô∏è  –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL');
        
    } catch (error) {
        console.error('\nüí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupMiniApp();
