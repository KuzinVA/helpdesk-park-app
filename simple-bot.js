const https = require('https');

const BOT_TOKEN = '8465643840:AAEWFjl1h-EY3150NgihSG2HAaVYLci14Rk';
let offset = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API
function makeRequest(method, data = null) {
    return new Promise((resolve, reject) => {
        const postData = data ? JSON.stringify(data) : '';
        
        const options = {
            hostname: 'api.telegram.org',
            port: 443,
            path: `/bot${BOT_TOKEN}/${method}`,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };

        const req = https.request(options, (res) => {
            let responseData = '';
            
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(responseData);
                    if (result.ok) {
                        resolve(result.result);
                    } else {
                        reject(new Error(`Telegram API error: ${result.description}`));
                    }
                } catch (error) {
                    reject(new Error(`Failed to parse response: ${error.message}`));
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (postData) {
            req.write(postData);
        }
        
        req.end();
    });
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
async function sendMessage(chatId, text, replyMarkup = null) {
    try {
        const data = {
            chat_id: chatId,
            text: text,
            parse_mode: 'HTML'
        };
        
        if (replyMarkup) {
            data.reply_markup = replyMarkup;
        }
        
        await makeRequest('sendMessage', data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    }
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
async function handleStart(chatId, username = '') {
    const welcomeText = `üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Helpdesk Park!</b>

–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –ø–∞—Ä–∫–∞ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä—è–º–æ –≤ Telegram!

<b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ üìã –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏
‚Ä¢ ‚ûï –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ üë§ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Ñ–∏–ª–µ–º
‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!`;

    const keyboard = {
        inline_keyboard: [
            [
                {
                    text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park',
                                            web_app: {
                            url: 'http://localhost:8080'
                        }
                }
            ],
            [
                {
                    text: 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏',
                    callback_data: 'my_tickets'
                },
                {
                    text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É',
                    callback_data: 'create_ticket'
                }
            ],
            [
                {
                    text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                    callback_data: 'stats'
                },
                {
                    text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
                    callback_data: 'profile'
                }
            ],
            [
                {
                    text: '‚ùì –ü–æ–º–æ—â—å',
                    callback_data: 'help'
                }
            ]
        ]
    };

    await sendMessage(chatId, welcomeText, keyboard);
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∑–∞–ø—Ä–æ—Å—ã
async function handleCallback(chatId, callbackData) {
    let responseText = '';
    
    switch (callbackData) {
        case 'my_tickets':
            responseText = `üìã <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>

‚Ä¢ <b>–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω</b> (–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  –°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ
  –°–æ–∑–¥–∞–Ω–æ: 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥

‚Ä¢ <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Å–≤–µ—â–µ–Ω–∏–µ–º</b> (–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  –°—Ç–∞—Ç—É—Å: –û—Ç–∫—Ä—ã—Ç–∞
  –°–æ–∑–¥–∞–Ω–æ: 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥

–ù–∞–∂–º–∏—Ç–µ "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park" –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!`;
            break;
            
        case 'create_ticket':
            responseText = `‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏</b>

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–°–æ–∑–¥–∞—Ç—å".

–ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∑–¥–µ—Å—å, –∏ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –∑–∞—è–≤–∫—É –∑–∞ –≤–∞—Å:

<b>–§–æ—Ä–º–∞—Ç:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π/–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π`;
            break;
            
        case 'stats':
            responseText = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:</b>

<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: 25
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: 12
‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: 3
‚Ä¢ –†–µ—à–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: 8
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: 1

<b>–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:</b>
‚Ä¢ –í—ã—Å–æ–∫–∏–π: 5 –∑–∞—è–≤–æ–∫
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π: 12 –∑–∞—è–≤–æ–∫
‚Ä¢ –ù–∏–∑–∫–∏–π: 8 –∑–∞—è–≤–æ–∫

–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!`;
            break;
            
        case 'profile':
            responseText = `üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>

<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ò–º—è: ${username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
‚Ä¢ –†–æ–ª—å: –û–ø–µ—Ä–∞—Ç–æ—Ä
‚Ä¢ –î–æ—Å—Ç—É–ø: –ü–æ–ª–Ω—ã–π
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: –°–µ–≥–æ–¥–Ω—è

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã
‚Ä¢ –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π
‚Ä¢ –¢–µ–º–∞: –ê–≤—Ç–æ

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!`;
            break;
            
        case 'help':
            responseText = `‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Helpdesk Park</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park"
2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ Telegram
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.

<b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É: –Ω–∞–∂–º–∏—Ç–µ "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫: –Ω–∞–∂–º–∏—Ç–µ "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏"
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –Ω–∞–∂–º–∏—Ç–µ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"`;
            break;
            
        default:
            responseText = '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.';
    }
    
    await sendMessage(chatId, responseText);
}

// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async function getUpdates() {
    try {
        const updates = await makeRequest('getUpdates', {
            offset: offset,
            timeout: 30
        });
        
        if (updates && updates.length > 0) {
            for (const update of updates) {
                offset = update.update_id + 1;
                
                if (update.message) {
                    const message = update.message;
                    const chatId = message.chat.id;
                    const text = message.text || '';
                    const username = message.from.username || message.from.first_name;
                    
                    console.log(`üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @${username}: ${text}`);
                    
                    if (text === '/start') {
                        await handleStart(chatId, username);
                    } else if (text === '/help') {
                        await handleCallback(chatId, 'help');
                    } else if (text.startsWith('‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ:') || text.startsWith('‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ:')) {
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
                        await sendMessage(chatId, `‚úÖ <b>–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>

–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.

–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏"`);
                    }
                } else if (update.callback_query) {
                    const callbackQuery = update.callback_query;
                    const chatId = callbackQuery.message.chat.id;
                    const callbackData = callbackQuery.data;
                    
                    console.log(`üîò Callback: ${callbackData}`);
                    
                    await handleCallback(chatId, callbackData);
                    
                    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                    await makeRequest('answerCallbackQuery', {
                        callback_query_id: callbackQuery.id
                    });
                }
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error.message);
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
async function runBot() {
    console.log('ü§ñ –ë–æ—Ç Helpdesk Park –∑–∞–ø—É—â–µ–Ω!');
    console.log('üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã');
    console.log('üîó –ë–æ—Ç: @helpdeskParkApp_bot');
    console.log('üåê –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:3000');
    console.log('\n‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...\n');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    setInterval(getUpdates, 1000);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
runBot().catch(console.error);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    process.exit(0);
});
