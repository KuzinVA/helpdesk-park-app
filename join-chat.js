const https = require('https');

const BOT_TOKEN = '8465643840:AAEWFjl1h-EY3150NgihSG2HAaVYLci14Rk';
const INVITE_LINK = 'https://t.me/+grmdzW2hrEUyN2Qy';

console.log('ü§ñ –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–æ–º Helpdesk Park...');
console.log(`üîë –¢–æ–∫–µ–Ω: ${BOT_TOKEN.substring(0, 10)}...`);
console.log(`üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: ${INVITE_LINK}`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API
function makeRequest(method, data = null) {
    return new Promise((resolve, reject) => {
        const postData = data ? JSON.stringify(data) : '';
        
        const options = {
            hostname: 'api.telegram.org',
            port: 443,
            path: `/bot${BOT_TOKEN}/${method}`,
            method: data ? 'POST' : 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };

        const req = https.request(options, (res) => {
            let responseData = '';
            
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(responseData);
                    if (result.ok) {
                        resolve(result);
                    } else {
                        reject(new Error(`Telegram API error: ${result.description}`));
                    }
                } catch (error) {
                    reject(new Error(`JSON parse error: ${error.message}`));
                }
            });
        });

        req.on('error', (error) => {
            reject(new Error(`Request error: ${error.message}`));
        });

        if (postData) {
            req.write(postData);
        }
        
        req.end();
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
async function getBotInfo() {
    try {
        console.log('üìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ...');
        const response = await makeRequest('getMe');
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', response.result);
        return response.result;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error.message);
        throw error;
    }
}

// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –ø–æ username
async function getChatByUsername(username) {
    try {
        console.log(`üîç –ò—â–µ–º —á–∞—Ç –ø–æ username: ${username}`);
        const response = await makeRequest(`getChat?chat_id=@${username}`);
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:', response.result);
        return response.result;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–∞—Ç–∞ @${username}:`, error.message);
        throw error;
    }
}

// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –ø–æ ID
async function getChatById(chatId) {
    try {
        console.log(`üîç –ò—â–µ–º —á–∞—Ç –ø–æ ID: ${chatId}`);
        const response = await makeRequest(`getChat?chat_id=${chatId}`);
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:', response.result);
        return response.result;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–∞—Ç–∞ ${chatId}:`, error.message);
        throw error;
    }
}

// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –ø–æ invite link
async function getChatByInviteLink(inviteLink) {
    try {
        console.log(`üîç –ò—â–µ–º —á–∞—Ç –ø–æ invite link: ${inviteLink}`);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ invite link
        const match = inviteLink.match(/t\.me\/\+([a-zA-Z0-9]+)/);
        if (match) {
            const username = match[1];
            console.log(`üìù –ò–∑–≤–ª–µ—á–µ–Ω username: ${username}`);
            
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            const response = await makeRequest(`getChat?chat_id=@${username}`);
            console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:', response.result);
            return response.result;
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å username –∏–∑ invite link');
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–∞—Ç–∞ –ø–æ invite link:`, error.message);
        throw error;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —á–∞—Ç–æ–º...\n');
        
        // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        const botInfo = await getBotInfo();
        console.log(`\nü§ñ –ë–æ—Ç: @${botInfo.username} (${botInfo.first_name})`);
        console.log(`üÜî Bot ID: ${botInfo.id}\n`);
        
        // 2. –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –Ω–∞–π—Ç–∏ —á–∞—Ç
        console.log('üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞...\n');
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ invite link
        try {
            const chatByInvite = await getChatByInviteLink(INVITE_LINK);
            console.log(`\nüéØ –ß–∞—Ç –Ω–∞–π–¥–µ–Ω –ø–æ invite link!`);
            console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${chatByInvite.title}`);
            console.log(`üÜî Chat ID: ${chatByInvite.id}`);
            console.log(`üë• –¢–∏–ø: ${chatByInvite.type}`);
            
            if (chatByInvite.type === 'supergroup' || chatByInvite.type === 'group') {
                console.log(`\nüí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:`);
                console.log(`curl "http://localhost:3001/api/chat-members?chat_id=${chatByInvite.id}"`);
            }
            
        } catch (error) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç –ø–æ invite link');
        }
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ –≤–æ–∑–º–æ–∂–Ω—ã–º ID
        const possibleIds = [4896951550, -4896951550, 1004896951550, -1004896951550];
        
        for (const chatId of possibleIds) {
            try {
                const chatById = await getChatById(chatId);
                console.log(`\nüéØ –ß–∞—Ç –Ω–∞–π–¥–µ–Ω –ø–æ ID ${chatId}!`);
                console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${chatById.title}`);
                console.log(`üÜî Chat ID: ${chatById.id}`);
                console.log(`üë• –¢–∏–ø: ${chatById.type}`);
                
                if (chatById.type === 'supergroup' || chatById.type === 'group') {
                    console.log(`\nüí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:`);
                    console.log(`curl "http://localhost:3001/api/chat-members?chat_id=${chatById.id}"`);
                }
                
                break;
            } catch (error) {
                console.log(`‚ùå Chat ID ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        }
        
        console.log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
        console.log('1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @helpdeskParkApp_bot –≤ —á–∞—Ç');
        console.log('2. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        console.log('3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–π Chat ID –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤');
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);
