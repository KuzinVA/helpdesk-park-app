import React, { useState, useEffect } from 'react';
import { useHybridTelegramMCP } from '../hooks/useHybridTelegramMCP';

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–π MCP —Å–∏—Å—Ç–µ–º—ã
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Node.js MCP + Python MCP
 */
export const HybridTelegramDemo: React.FC = () => {
  const [status, setStatus] = useState<any>(null);
  const [analytics, setAnalytics] = useState<any>(null);
  const [tools, setTools] = useState<any>(null);
  
  const {
    loading,
    error,
    clearError,
    getMCPStatus,
    getSystemAnalytics,
    getAvailableTools,
    sendTicketNotification,
    createGroup,
    createSupportGroup,
    testHybridSystem
  } = useHybridTelegramMCP();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    loadInitialData();
  }, []);

  const loadInitialData = async () => {
    try {
      const [statusData, analyticsData, toolsData] = await Promise.all([
        getMCPStatus(),
        getSystemAnalytics(),
        getAvailableTools()
      ]);
      
      setStatus(statusData);
      setAnalytics(analyticsData);
      setTools(toolsData);
    } catch (err) {
      console.error('Failed to load initial data:', err);
    }
  };

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testTicket = {
    id: 'ticket_123456',
    title: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–∏—Å—Ç–µ–º–µ',
    status: 'ASSIGNED',
    priority: 'HIGH',
    service: { name: 'IT Support' },
    location: { name: '–ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å' }
  };

  const handleTestNodeMCP = async () => {
    try {
      const result = await testHybridSystem('test_node_mcp');
      alert(`Node.js MCP Test: ${JSON.stringify(result, null, 2)}`);
    } catch (err) {
      alert(`Node.js MCP Test Failed: ${err}`);
    }
  };

  const handleTestPythonMCP = async () => {
    try {
      const result = await testHybridSystem('test_python_mcp');
      alert(`Python MCP Test: ${JSON.stringify(result, null, 2)}`);
    } catch (err) {
      alert(`Python MCP Test Failed: ${err}`);
    }
  };

  const handleSendTicketNotification = async () => {
    try {
      const result = await sendTicketNotification(
        '@support_team',
        testTicket,
        'ASSIGNED'
      );
      alert(`Ticket notification sent: ${JSON.stringify(result, null, 2)}`);
    } catch (err) {
      alert(`Failed to send ticket notification: ${err}`);
    }
  };

  const handleCreateGroup = async () => {
    try {
      const result = await createGroup('Test Group', [123456789, 987654321]);
      alert(`Group created: ${JSON.stringify(result, null, 2)}`);
    } catch (err) {
      alert(`Failed to create group: ${err}`);
    }
  };

  const handleCreateSupportGroup = async () => {
    try {
      const result = await createSupportGroup(
        'IT Support Team',
        [111111111, 222222222, 333333333],
        'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É IT –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –û–±—Å—É–∂–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–∞—Ö\n‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É'
      );
      alert(`Support group created: ${JSON.stringify(result, null, 2)}`);
    } catch (err) {
      alert(`Failed to create support group: ${err}`);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="text-center">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          üöÄüêç –ì–∏–±—Ä–∏–¥–Ω–∞—è MCP —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è Telegram
        </h1>
        <p className="text-gray-600">
          –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Node.js MCP + Python MCP
        </p>
      </div>

      {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
      {status && (
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className={`p-4 rounded-lg ${status.node_mcp.ready ? 'bg-green-100' : 'bg-red-100'}`}>
              <h3 className="font-medium">üöÄ Node.js MCP</h3>
              <p className={`text-sm ${status.node_mcp.ready ? 'text-green-700' : 'text-red-700'}`}>
                {status.node_mcp.ready ? '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' : '–ù–µ –≥–æ—Ç–æ–≤'}
              </p>
              <p className="text-xs text-gray-600">{status.node_mcp.description}</p>
            </div>
            <div className={`p-4 rounded-lg ${status.python_mcp.ready ? 'bg-green-100' : 'bg-red-100'}`}>
              <h3 className="font-medium">üêç Python MCP</h3>
              <p className={`text-sm ${status.python_mcp.ready ? 'text-green-700' : 'text-red-700'}`}>
                {status.python_mcp.ready ? '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' : '–ù–µ –≥–æ—Ç–æ–≤'}
              </p>
              <p className="text-xs text-gray-600">{status.python_mcp.description}</p>
            </div>
            <div className={`p-4 rounded-lg ${status.hybrid ? 'bg-blue-100' : 'bg-yellow-100'}`}>
              <h3 className="font-medium">üöÄüêç –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</h3>
              <p className={`text-sm ${status.hybrid ? 'text-blue-700' : 'text-yellow-700'}`}>
                {status.hybrid ? '–ü–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞' : '–ß–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞'}
              </p>
              <p className="text-xs text-gray-600">–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</p>
            </div>
          </div>
        </div>
      )}

      {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã */}
      {tools && (
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="font-medium text-green-700 mb-2">üöÄ Node.js MCP ({tools.node_mcp.tools_count})</h3>
              <ul className="text-sm space-y-1">
                {tools.node_mcp.tools.map((tool: string, index: number) => (
                  <li key={index} className="text-gray-600">‚Ä¢ {tool}</li>
                ))}
              </ul>
            </div>
            <div>
              <h3 className="font-medium text-blue-700 mb-2">üêç Python MCP ({tools.python_mcp.tools_count})</h3>
              <ul className="text-sm space-y-1">
                {tools.python_mcp.tools.map((tool: string, index: number) => (
                  <li key={index} className="text-gray-600">‚Ä¢ {tool}</li>
                ))}
              </ul>
            </div>
          </div>
          <div className="mt-4 p-3 bg-gray-50 rounded">
            <p className="text-sm text-gray-700">
              <strong>–í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:</strong> {tools.total_tools}
            </p>
          </div>
        </div>
      )}

      {/* –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ */}
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-xl font-semibold mb-4">üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <button
            onClick={handleTestNodeMCP}
            disabled={loading}
            className="p-3 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50"
          >
            –¢–µ—Å—Ç Node.js MCP
          </button>
          <button
            onClick={handleTestPythonMCP}
            disabled={loading}
            className="p-3 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
          >
            –¢–µ—Å—Ç Python MCP
          </button>
        </div>
      </div>

      {/* –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π */}
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-xl font-semibold mb-4">üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π</h2>
        <div className="space-y-4">
          <div className="p-4 border rounded">
            <h3 className="font-medium mb-2">üöÄ Node.js MCP - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ</h3>
            <p className="text-sm text-gray-600 mb-3">
              –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è Helpdesk
            </p>
            <button
              onClick={handleSendTicketNotification}
              disabled={loading}
              className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50"
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            </button>
          </div>

          <div className="p-4 border rounded">
            <h3 className="font-medium mb-2">üêç Python MCP - –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã</h3>
            <p className="text-sm text-gray-600 mb-3">
              –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ Python MCP (–æ–±—â–∏–µ Telegram —Ñ—É–Ω–∫—Ü–∏–∏)
            </p>
            <button
              onClick={handleCreateGroup}
              disabled={loading}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
            >
              –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
            </button>
          </div>

          <div className="p-4 border rounded">
            <h3 className="font-medium mb-2">üöÄüêç –ì–∏–±—Ä–∏–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏</h3>
            <p className="text-sm text-gray-600 mb-3">
              –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ Python MCP + –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Node.js MCP
            </p>
            <button
              onClick={handleCreateSupportGroup}
              disabled={loading}
              className="px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 disabled:opacity-50"
            >
              –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            </button>
          </div>
        </div>
      </div>

      {/* –û—à–∏–±–∫–∏ */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex justify-between items-start">
            <div>
              <h3 className="text-red-800 font-medium">–û—à–∏–±–∫–∞</h3>
              <p className="text-red-700 text-sm">{error}</p>
            </div>
            <button
              onClick={clearError}
              className="text-red-400 hover:text-red-600"
            >
              ‚úï
            </button>
          </div>
        </div>
      )}

      {/* –ó–∞–≥—Ä—É–∑–∫–∞ */}
      {loading && (
        <div className="text-center py-8">
          <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
          <p className="mt-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ */}
      <div className="bg-gray-50 rounded-lg p-6">
        <h2 className="text-xl font-semibold mb-4">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</h2>
        <div className="text-sm text-gray-600 space-y-2">
          <p>
            <strong>–ì–∏–±—Ä–∏–¥–Ω–∞—è MCP —Å–∏—Å—Ç–µ–º–∞</strong> –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–≤—É—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤:
          </p>
          <ul className="list-disc list-inside space-y-1 ml-4">
            <li><strong>Node.js MCP:</strong> –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram Mini App –∏ Helpdesk —Å–∏—Å—Ç–µ–º</li>
            <li><strong>Python MCP:</strong> –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram (—á–∞—Ç—ã, –≥—Ä—É–ø–ø—ã, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –º–µ–¥–∏–∞)</li>
            <li><strong>–ì–∏–±—Ä–∏–¥–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</strong> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ MCP + fallback –º–µ—Ö–∞–Ω–∏–∑–º</li>
          </ul>
          <p className="mt-4">
            <strong>–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ:</strong> {tools?.total_tools || '...'} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
          </p>
        </div>
      </div>
    </div>
  );
};
