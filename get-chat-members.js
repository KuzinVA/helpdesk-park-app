const https = require('https');

const BOT_TOKEN = '8465643840:AAEWFjl1h-EY3150NgihSG2HAaVYLci14Rk';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API
function makeRequest(method, data = null) {
    return new Promise((resolve, reject) => {
        const postData = data ? JSON.stringify(data) : '';
        
        const options = {
            hostname: 'api.telegram.org',
            port: 443,
            path: `/bot${BOT_TOKEN}/${method}`,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };

        const req = https.request(options, (res) => {
            let responseData = '';
            
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(responseData);
                    if (result.ok) {
                        resolve(result.result);
                    } else {
                        reject(new Error(`Telegram API error: ${result.description}`));
                    }
                } catch (error) {
                    reject(new Error(`Failed to parse response: ${error.message}`));
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (postData) {
            req.write(postData);
        }
        
        req.end();
    });
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
async function getChatInfo(chatId) {
    try {
        console.log(`üìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ ${chatId}...`);
        const chatInfo = await makeRequest('getChat', { chat_id: chatId });
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞:');
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${chatInfo.title || chatInfo.first_name}`);
        console.log(`   –¢–∏–ø: ${chatInfo.type}`);
        console.log(`   ID: ${chatInfo.id}`);
        return chatInfo;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: ${error.message}`);
        return null;
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–µ
async function getChatMemberCount(chatId) {
    try {
        console.log(`üë• –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–µ ${chatId}...`);
        const memberCount = await makeRequest('getChatMemberCount', { chat_id: chatId });
        console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${memberCount}`);
        return memberCount;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${error.message}`);
        return null;
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
async function getChatAdministrators(chatId) {
    try {
        console.log(`üëë –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞ ${chatId}...`);
        const admins = await makeRequest('getChatAdministrators', { chat_id: chatId });
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${admins.length}`);
        
        admins.forEach((admin, index) => {
            const user = admin.user;
            const status = admin.status;
            console.log(`   ${index + 1}. ${user.first_name} ${user.last_name || ''} (@${user.username || '–±–µ–∑ username'}) - ${status}`);
        });
        
        return admins;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${error.message}`);
        return null;
    }
}

// –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞ –ø–æ ID
async function getChatMember(chatId, userId) {
    try {
        console.log(`üë§ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ ${userId} –≤ —á–∞—Ç–µ ${chatId}...`);
        const member = await makeRequest('getChatMember', { chat_id: chatId, user_id: userId });
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –ø–æ–ª—É—á–µ–Ω–∞:');
        console.log(`   –ò–º—è: ${member.user.first_name} ${member.user.last_name || ''}`);
        console.log(`   Username: @${member.user.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${member.status}`);
        console.log(`   –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${new Date(member.joined_date * 1000).toLocaleString('ru-RU')}`);
        return member;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ: ${error.message}`);
        return null;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üöÄ –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ Telegram —á–∞—Ç–∞\n');
    
    // –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const chatId = process.argv[2] || '-1001234567890'; // ID —á–∞—Ç–∞ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –≥—Ä—É–ø–ø)
    const userId = process.argv[3] || '123456789'; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    console.log(`üìã –†–∞–±–æ—Ç–∞–µ–º —Å —á–∞—Ç–æ–º: ${chatId}`);
    console.log(`üë§ –ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${userId}\n`);
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        const chatInfo = await getChatInfo(chatId);
        if (chatInfo) {
            console.log('');
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const memberCount = await getChatMemberCount(chatId);
            if (memberCount) {
                console.log('');
                
                // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                const admins = await getChatAdministrators(chatId);
                if (admins) {
                    console.log('');
                    
                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
                    const member = await getChatMember(chatId, userId);
                    if (member) {
                        console.log('');
                        console.log('üéâ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
                    }
                }
            }
        }
        
    } catch (error) {
        console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    }
    
    console.log('\nüìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:');
    console.log('1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç');
    console.log('2. –ü–æ–ª—É—á–∏—Ç–µ ID —á–∞—Ç–∞ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)');
    console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node get-chat-members.js CHAT_ID USER_ID');
    console.log('4. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ: node get-chat-members.js –¥–ª—è –¥–µ–º–æ');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main().catch(console.error);
}

module.exports = {
    makeRequest,
    getChatInfo,
    getChatMemberCount,
    getChatAdministrators,
    getChatMember
};
