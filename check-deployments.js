const https = require('https');
const http = require('http');

console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–µ–ø–ª–æ—è...');
console.log('');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP —Å—Ç–∞—Ç—É—Å–∞
function checkUrl(url, platform) {
  return new Promise((resolve) => {
    const client = url.startsWith('https:') ? https : http;
    
    const req = client.get(url, { timeout: 10000 }, (res) => {
      console.log(`‚úÖ ${platform}: ${url} - –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
      resolve({ platform, url, status: res.statusCode, working: true });
    });
    
    req.on('error', (error) => {
      if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
        console.log(`‚ùå ${platform}: ${url} - –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
      } else {
        console.log(`‚ùå ${platform}: ${url} - –û—à–∏–±–∫–∞: ${error.code || error.message}`);
      }
      resolve({ platform, url, status: 'ERROR', working: false });
    });
    
    req.setTimeout(10000, () => {
      console.log(`‚è∞ ${platform}: ${url} - –¢–∞–π–º–∞—É—Ç`);
      resolve({ platform, url, status: 'TIMEOUT', working: false });
    });
  });
}

async function checkAllPlatforms() {
  const platforms = [
    {
      name: 'GitHub Pages (Frontend)',
      url: 'https://kuzinva.github.io/helpdesk-park-app/',
      description: '–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥'
    },
    {
      name: 'Render (Backend API)',
      url: 'https://helpdesk-park-api.onrender.com/api/health',
      description: 'Backend API'
    },
    {
      name: 'Render (Frontend)',
      url: 'https://helpdesk-park-frontend.onrender.com',
      description: 'Frontend –Ω–∞ Render'
    },
    {
      name: 'Render (Chat API)',
      url: 'https://helpdesk-park-chat-api.onrender.com',
      description: 'Chat API'
    },
    {
      name: 'Railway (Backend)',
      url: 'https://helpdesk-park-production.up.railway.app/api/health',
      description: 'Backend –Ω–∞ Railway'
    },
    {
      name: 'Railway (Chat API)',
      url: 'https://helpdesk-park-chat-api.up.railway.app',
      description: 'Chat API –Ω–∞ Railway'
    }
  ];

  console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:');
  console.log('');

  const results = [];
  
  for (const platform of platforms) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${platform.name}...`);
    const result = await checkUrl(platform.url, platform.name);
    results.push({ ...result, description: platform.description });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (platform !== platforms[platforms.length - 1]) {
      console.log('‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã...');
      await delay(2000);
    }
    console.log('');
  }

  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
  console.log('');

  const working = results.filter(r => r.working);
  const notWorking = results.filter(r => !r.working);

  if (working.length > 0) {
    console.log('‚úÖ –†–ê–ë–û–¢–ê–Æ–¢:');
    working.forEach(r => {
      console.log(`   ‚Ä¢ ${r.platform} - ${r.url}`);
    });
  }

  if (notWorking.length > 0) {
    console.log('');
    console.log('‚ùå –ù–ï –†–ê–ë–û–¢–ê–Æ–¢:');
    notWorking.forEach(r => {
      console.log(`   ‚Ä¢ ${r.platform} - ${r.url}`);
    });
  }

  console.log('');
  console.log('üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  
  if (working.some(r => r.platform.includes('GitHub Pages'))) {
    console.log('   ‚úÖ GitHub Pages —Ä–∞–±–æ—Ç–∞–µ—Ç - —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω');
  }
  
  if (working.some(r => r.platform.includes('Railway'))) {
    console.log('   ‚úÖ Railway —Ä–∞–±–æ—Ç–∞–µ—Ç - backend –¥–æ—Å—Ç—É–ø–µ–Ω');
  }
  
  if (working.some(r => r.platform.includes('Render'))) {
    console.log('   ‚úÖ Render —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã');
  }

  console.log('');
  console.log('üîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  console.log('   1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–µ–∞–ª—å–Ω–æ –Ω—É–∂–Ω—ã');
  console.log('   2. –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã');
  console.log('   3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkAllPlatforms();
