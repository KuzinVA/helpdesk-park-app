import { Controller, Post, Body, Get, Param, UseGuards } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';
import { TelegramService } from './telegram.service';

@ApiTags('Telegram Bot')
@Controller('telegram')
export class TelegramController {
  constructor(private readonly telegramService: TelegramService) {}

  @Post('webhook')
  @ApiOperation({ summary: 'Webhook –¥–ª—è Telegram Bot' })
  @ApiResponse({ status: 200, description: 'Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω' })
  async handleWebhook(@Body() update: any) {
    this.logger.log('Received Telegram webhook:', update);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if (update.message) {
      await this.handleMessage(update.message);
    } else if (update.callback_query) {
      await this.handleCallbackQuery(update.callback_query);
    }
    
    return { ok: true };
  }

  @Get('webhook/set/:url')
  @ApiOperation({ summary: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook' })
  @ApiResponse({ status: 200, description: 'Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' })
  async setWebhook(@Param('url') url: string) {
    return this.telegramService.setWebhook(url);
  }

  @Get('webhook/delete')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å webhook' })
  @ApiResponse({ status: 200, description: 'Webhook —É–¥–∞–ª–µ–Ω' })
  async deleteWebhook() {
    return this.telegramService.deleteWebhook();
  }

  @Get('test/:chatId')
  @ApiOperation({ summary: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' })
  @ApiResponse({ status: 200, description: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' })
  async sendTestMessage(@Param('chatId') chatId: string) {
    const message = 'üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Helpdesk Park App!';
    return this.telegramService.sendMessage(chatId, message);
  }

  private async handleMessage(message: any) {
    const { chat, text } = message;
    
    if (text === '/start') {
      const welcomeMessage = `üé° <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Helpdesk Park!</b>\n\n` +
        `–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∞–º–∏ –≤ –ø–∞—Ä–∫–µ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤.\n\n` +
        `üì± <b>–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>\n` +
        `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.`;
      
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
              web_app: {
                url: `${process.env.FRONTEND_URL || 'http://localhost:5173'}`
              }
            }
          ]
        ]
      };
      
      await this.telegramService.sendMessage(chat.id.toString(), welcomeMessage, keyboard);
    }
  }

  private async handleCallbackQuery(callbackQuery: any) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –æ—Ç inline –∫–Ω–æ–ø–æ–∫
    this.logger.log('Callback query received:', callbackQuery);
  }
}
