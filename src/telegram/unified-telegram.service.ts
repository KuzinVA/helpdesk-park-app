import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { PrismaService } from '@/common/prisma/prisma.service';

/**
 * –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π Telegram —Å–µ—Ä–≤–∏—Å
 * –í–∫–ª—é—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å + MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é + –≥–∏–±—Ä–∏–¥–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
 */
@Injectable()
export class UnifiedTelegramService {
  private readonly logger = new Logger(UnifiedTelegramService.name);
  private readonly botToken: string;
  private readonly botUsername: string;
  private readonly baseUrl: string;
  private readonly frontendUrl: string;

  // MCP –∫–ª–∏–µ–Ω—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  private nodeMCPClient: any;
  private pythonMCPClient: any;

  constructor(
    private readonly configService: ConfigService,
    private readonly prisma: PrismaService,
  ) {
    this.botToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    this.botUsername = this.configService.get<string>('TELEGRAM_BOT_USERNAME');
    this.frontendUrl = this.configService.get<string>('FRONTEND_URL') || 'http://localhost:5173';
    this.baseUrl = `https://api.telegram.org/bot${this.botToken}`;
  }

  // ========================================
  // –û–°–ù–û–í–ù–´–ï TELEGRAM –§–£–ù–ö–¶–ò–ò
  // ========================================

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
   */
  async sendMessage(chatId: string, message: string, keyboard?: any) {
    try {
      const url = `${this.baseUrl}/sendMessage`;
      const payload: any = {
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML',
      };

      if (keyboard) {
        payload.reply_markup = keyboard;
      }

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error(`Telegram API error: ${response.statusText}`);
      }

      const result = await response.json();
      this.logger.log(`Message sent to chat ${chatId}: ${result.ok}`);
      return result;
    } catch (error) {
      this.logger.error(`Error sending message to chat ${chatId}:`, error);
      throw error;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
   */
  async setWebhook(url: string) {
    try {
      const webhookUrl = `${this.baseUrl}/setWebhook`;
      const response = await fetch(webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url }),
      });

      const result = await response.json();
      this.logger.log(`Webhook set: ${result.ok}`);
      return result;
    } catch (error) {
      this.logger.error('Error setting webhook:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ webhook
   */
  async deleteWebhook() {
    try {
      const webhookUrl = `${this.baseUrl}/deleteWebhook`;
      const response = await fetch(webhookUrl, {
        method: 'POST',
      });

      const result = await response.json();
      this.logger.log(`Webhook deleted: ${result.ok}`);
      return result;
    } catch (error) {
      this.logger.error('Error deleting webhook:', error);
      throw error;
    }
  }

  // ========================================
  // –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ó–ê–Ø–í–ö–ê–•
  // ========================================

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ
   */
  async sendTicketNotification(chatId: string, ticket: any, type: string) {
    const emoji = this.getNotificationEmoji(type);
    const status = this.getStatusText(ticket.status);
    const priority = this.getPriorityText(ticket.priority);

    const message = `${emoji} <b>${type}</b>\n\n` +
      `–ó–∞—è–≤–∫–∞ #${ticket.id.slice(-6)}\n` +
      `–°—Ç–∞—Ç—É—Å: ${status}\n` +
      `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priority}\n` +
      `–°–ª—É–∂–±–∞: ${ticket.service?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `–õ–æ–∫–∞—Ü–∏—è: ${ticket.location?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n` +
      `üìù ${ticket.title}`;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É',
            web_app: {
              url: `${this.frontendUrl}/tickets/${ticket.id}`
            }
          }
        ]
      ]
    };

    return this.sendMessage(chatId, message, keyboard);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ SLA –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
   */
  async sendSLAWarning(chatId: string, ticket: any) {
    const message = `‚è∞ <b>SLA –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b>\n\n` +
      `–ó–∞—è–≤–∫–∞ #${ticket.id.slice(-6)} —Å–∫–æ—Ä–æ –ø—Ä–æ—Å—Ä–æ—á–∏—Ç—Å—è!\n` +
      `–î–µ–¥–ª–∞–π–Ω: ${new Date(ticket.slaDeadline).toLocaleString('ru-RU')}\n\n` +
      `üìù ${ticket.title}`;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É',
            web_app: {
              url: `${this.frontendUrl}/tickets/${ticket.id}`
            }
          }
        ]
      ]
    };

    return this.sendMessage(chatId, message, keyboard);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ SLA –Ω–∞—Ä—É—à–µ–Ω–∏—è
   */
  async sendSLABreach(chatId: string, ticket: any) {
    const message = `üö® <b>SLA –ù–ê–†–£–®–ï–ù–ò–ï</b>\n\n` +
      `–ó–∞—è–≤–∫–∞ #${ticket.id.slice(-6)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!\n` +
      `–î–µ–¥–ª–∞–π–Ω: ${new Date(ticket.slaDeadline).toLocaleString('ru-RU')}\n` +
      `–ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${this.calculateDelay(ticket.slaDeadline)} –º–∏–Ω\n\n` +
      `üìù ${ticket.title}`;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É',
            web_app: {
              url: `${this.frontendUrl}/tickets/${ticket.id}`
            }
          }
        ]
      ]
    };

    return this.sendMessage(chatId, message, keyboard);
  }

  // ========================================
  // MCP –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û)
  // ========================================

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js MCP –∫–ª–∏–µ–Ω—Ç–∞
   */
  setNodeMCPClient(client: any) {
    this.nodeMCPClient = client;
    this.logger.log('Node.js MCP client set');
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python MCP –∫–ª–∏–µ–Ω—Ç–∞
   */
  setPythonMCPClient(client: any) {
    this.pythonMCPClient = client;
    this.logger.log('Python MCP client set');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ MCP –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  isNodeMCPReady(): boolean {
    return !!this.nodeMCPClient;
  }

  isPythonMCPReady(): boolean {
    return !!this.pythonMCPClient;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ MCP (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
   */
  async sendTicketNotificationViaMCP(
    chatId: string,
    ticket: any,
    notificationType: 'ASSIGNED' | 'STATUS_CHANGED' | 'COMMENT_ADDED' | 'SLA_WARNING' | 'SLA_BREACH'
  ) {
    try {
      if (this.nodeMCPClient) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Node.js MCP
        const result = await this.nodeMCPClient.callTool('send_ticket_notification', {
          chat_id: chatId,
          ticket,
          notification_type: notificationType
        });
        this.logger.log(`Ticket notification sent via Node.js MCP to chat ${chatId}`);
        return result;
      } else {
        // Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        return this.sendTicketNotification(chatId, ticket, notificationType);
      }
    } catch (error) {
      this.logger.warn(`MCP failed, falling back to standard method: ${error.message}`);
      return this.sendTicketNotification(chatId, ticket, notificationType);
    }
  }

  // ========================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ========================================

  private getNotificationEmoji(type: string): string {
    const emojiMap: Record<string, string> = {
      'ASSIGNED': 'üë§',
      'STATUS_CHANGED': 'üîÑ',
      'COMMENT_ADDED': 'üí¨',
      'SLA_WARNING': '‚è∞',
      'SLA_BREACH': 'üö®',
      'default': 'üì¢'
    };
    return emojiMap[type] || emojiMap.default;
  }

  private getStatusText(status: string): string {
    const statusMap: Record<string, string> = {
      'NEW': '–ù–æ–≤–∞—è',
      'ASSIGNED': '–ù–∞–∑–Ω–∞—á–µ–Ω–∞',
      'IN_PROGRESS': '–í —Ä–∞–±–æ—Ç–µ',
      'ON_HOLD': '–ù–∞ –ø–∞—É–∑–µ',
      'RESOLVED': '–†–µ—à–µ–Ω–∞',
      'CLOSED': '–ó–∞–∫—Ä—ã—Ç–∞',
      'default': status
    };
    return statusMap[status] || statusMap.default;
  }

  private getPriorityText(priority: string): string {
    const priorityMap: Record<string, string> = {
      'LOW': '–ù–∏–∑–∫–∏–π',
      'MEDIUM': '–°—Ä–µ–¥–Ω–∏–π',
      'HIGH': '–í—ã—Å–æ–∫–∏–π',
      'CRITICAL': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
      'default': priority
    };
    return priorityMap[priority] || priorityMap.default;
  }

  private calculateDelay(deadline: Date): number {
    const now = new Date();
    const deadlineDate = new Date(deadline);
    return Math.floor((now.getTime() - deadlineDate.getTime()) / (1000 * 60));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
   */
  async getBotInfo() {
    try {
      const response = await fetch(`${this.baseUrl}/getMe`);
      const result = await response.json();
      return result.result;
    } catch (error) {
      this.logger.error('Error getting bot info:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
   */
  async getChatInfo(chatId: string) {
    try {
      const response = await fetch(`${this.baseUrl}/getChat?chat_id=${chatId}`);
      const result = await response.json();
      return result.result;
    } catch (error) {
      this.logger.error('Error getting chat info:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
   */
  async getChatMembers(chatId: string) {
    try {
      const response = await fetch(`${this.baseUrl}/getChatAdministrators?chat_id=${chatId}`);
      const result = await response.json();
      
      if (!result.ok) {
        throw new Error(`Telegram API error: ${result.description}`);
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram API - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
      // –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å getChatMemberCount
      const memberCountResponse = await fetch(`${this.baseUrl}/getChatMemberCount?chat_id=${chatId}`);
      const memberCountResult = await memberCountResponse.json();
      
      if (memberCountResult.ok) {
        this.logger.log(`Chat ${chatId} has ${memberCountResult.result} members`);
      }

      return result.result || [];
    } catch (error) {
      this.logger.error(`Error getting chat members for chat ${chatId}:`, error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return [];
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async sendMentionNotification(chatId: string, data: {
    ticket: any;
    author: any;
    context: string;
    mentionedUser: any;
  }) {
    try {
      const { ticket, author, context, mentionedUser } = data;
      
      const message = `
üîî <b>–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∑–∞—è–≤–∫–µ</b>

üë§ <b>–í–∞—Å —É–ø–æ–º—è–Ω—É–ª:</b> ${author.firstName} ${author.lastName || ''}
üìã <b>–ó–∞—è–≤–∫–∞:</b> #${ticket.id} - ${ticket.title}
üìù <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b> ${this.getContextText(context)}
üîó <b>–°—Å—ã–ª–∫–∞:</b> <a href="${this.frontendUrl}/tickets/${ticket.id}">–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É</a>
      `.trim();

      await this.sendMessage(chatId, message);
      this.logger.log(`Mention notification sent to user ${mentionedUser.telegramUsername} in chat ${chatId}`);
      
    } catch (error) {
      this.logger.error(`Error sending mention notification to chat ${chatId}:`, error);
      throw error;
    }
  }

  private getContextText(context: string): string {
    switch (context) {
      case 'ticket_creation': return '–∑–∞—è–≤–∫–µ';
      case 'comment': return '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏';
      case 'assignment': return '–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏';
      default: return '–∑–∞—è–≤–∫–µ';
    }
  }
}
