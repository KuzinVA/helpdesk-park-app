import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { PrismaService } from '@/common/prisma/prisma.service';

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name);
  private readonly botToken: string;
  private readonly botUsername: string;

  constructor(
    private readonly configService: ConfigService,
    private readonly prisma: PrismaService,
  ) {
    this.botToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    this.botUsername = this.configService.get<string>('TELEGRAM_BOT_USERNAME');
  }

  async sendMessage(chatId: string, message: string, keyboard?: any) {
    try {
      const url = `https://api.telegram.org/bot${this.botToken}/sendMessage`;
      const payload: any = {
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML',
      };

      if (keyboard) {
        payload.reply_markup = keyboard;
      }

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error(`Telegram API error: ${response.statusText}`);
      }

      const result = await response.json();
      this.logger.log(`Message sent to chat ${chatId}: ${result.ok}`);
      return result;
    } catch (error) {
      this.logger.error(`Error sending message to chat ${chatId}:`, error);
      throw error;
    }
  }

  async sendTicketNotification(chatId: string, ticket: any, type: string) {
    const emoji = this.getNotificationEmoji(type);
    const status = this.getStatusText(ticket.status);
    const priority = this.getPriorityText(ticket.priority);

    const message = `${emoji} <b>${type}</b>\n\n` +
      `–ó–∞—è–≤–∫–∞ #${ticket.id.slice(-6)}\n` +
      `–°—Ç–∞—Ç—É—Å: ${status}\n` +
      `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priority}\n` +
      `–°–ª—É–∂–±–∞: ${ticket.service?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `–õ–æ–∫–∞—Ü–∏—è: ${ticket.location?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n` +
      `üìù ${ticket.title}`;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É',
            web_app: {
              url: `${this.configService.get('FRONTEND_URL')}/tickets/${ticket.id}`
            }
          }
        ]
      ]
    };

    return this.sendMessage(chatId, message, keyboard);
  }

  async sendSLAWarning(chatId: string, ticket: any) {
    const message = `‚è∞ <b>SLA –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b>\n\n` +
      `–ó–∞—è–≤–∫–∞ #${ticket.id.slice(-6)} —Å–∫–æ—Ä–æ –ø—Ä–æ—Å—Ä–æ—á–∏—Ç—Å—è!\n` +
      `–î–µ–¥–ª–∞–π–Ω: ${new Date(ticket.slaDeadline).toLocaleString('ru-RU')}\n\n` +
      `üìù ${ticket.title}`;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É',
            web_app: {
              url: `${this.configService.get('FRONTEND_URL')}/tickets/${ticket.id}`
            }
          }
        ]
      ]
    };

    return this.sendMessage(chatId, message, keyboard);
  }

  async sendSLABreach(chatId: string, ticket: any) {
    const message = `‚ö†Ô∏è <b>SLA –ü–†–û–°–†–û–ß–ï–ù</b>\n\n` +
      `–ó–∞—è–≤–∫–∞ #${ticket.id.slice(-6)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!\n` +
      `–î–µ–¥–ª–∞–π–Ω: ${new Date(ticket.slaDeadline).toLocaleString('ru-RU')}\n\n` +
      `üìù ${ticket.title}`;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É',
            web_app: {
              url: `${this.configService.get('FRONTEND_URL')}/tickets/${ticket.id}`
            }
          }
        ]
      ]
    };

    return this.sendMessage(chatId, message, keyboard);
  }

  async setWebhook(url: string) {
    try {
      const webhookUrl = `https://api.telegram.org/bot${this.botToken}/setWebhook`;
      const response = await fetch(webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url }),
      });

      if (!response.ok) {
        throw new Error(`Failed to set webhook: ${response.statusText}`);
      }

      const result = await response.json();
      this.logger.log(`Webhook set: ${result.ok}`);
      return result;
    } catch (error) {
      this.logger.error('Error setting webhook:', error);
      throw error;
    }
  }

  async deleteWebhook() {
    try {
      const url = `https://api.telegram.org/bot${this.botToken}/deleteWebhook`;
      const response = await fetch(url, {
        method: 'POST',
      });

      if (!response.ok) {
        throw new Error(`Failed to delete webhook: ${response.statusText}`);
      }

      const result = await response.json();
      this.logger.log(`Webhook deleted: ${result.ok}`);
      return result;
    } catch (error) {
      this.logger.error('Error deleting webhook:', error);
      throw error;
    }
  }

  private getNotificationEmoji(type: string): string {
    switch (type) {
      case 'ASSIGNED': return 'üë§';
      case 'STATUS_CHANGED': return 'üîÑ';
      case 'COMMENT_ADDED': return 'üí¨';
      case 'SLA_WARNING': return '‚è∞';
      case 'SLA_BREACH': return '‚ö†Ô∏è';
      default: return 'üì¢';
    }
  }

  private getStatusText(status: string): string {
    const statusMap: Record<string, string> = {
      'NEW': '–ù–æ–≤–∞—è',
      'ASSIGNED': '–ù–∞–∑–Ω–∞—á–µ–Ω–∞',
      'IN_PROGRESS': '–í —Ä–∞–±–æ—Ç–µ',
      'ON_HOLD': '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
      'RESOLVED': '–†–µ—à–µ–Ω–∞',
      'CLOSED': '–ó–∞–∫—Ä—ã—Ç–∞',
    };
    return statusMap[status] || status;
  }

  private getPriorityText(priority: string): string {
    const priorityMap: Record<string, string> = {
      'LOW': '–ù–∏–∑–∫–∏–π',
      'MEDIUM': '–°—Ä–µ–¥–Ω–∏–π',
      'HIGH': '–í—ã—Å–æ–∫–∏–π',
      'CRITICAL': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
    };
    return priorityMap[priority] || priority;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
   */
  async getChatMembers(chatId: string) {
    try {
      const response = await fetch(
        `${this.baseUrl}/getChatAdministrators?chat_id=${chatId}`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );

      if (!response.ok) {
        throw new Error(`Telegram API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.ok) {
        throw new Error(data.description || 'Failed to get chat members');
      }

      return data.result;

    } catch (error) {
      this.logger.error('Error getting chat members:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏
   */
  async sendMentionNotification(chatId: string, mentionData: {
    ticket: any;
    author: any;
    context: string;
    mentionedUser: any;
  }) {
    const { ticket, author, context, mentionedUser } = mentionData;
    
    const contextEmoji = {
      'ticket_creation': 'üìù',
      'comment': 'üí¨',
      'assignment': 'üë§',
    };

    const contextText = {
      'ticket_creation': '—É–ø–æ–º—è–Ω—É–ª –≤–∞—Å –≤ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ',
      'comment': '—É–ø–æ–º—è–Ω—É–ª –≤–∞—Å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
      'assignment': '–Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞—Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º',
    };

    const message = `${contextEmoji[context] || 'üîî'} <b>–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n` +
      `${author.firstName} ${contextText[context] || '—É–ø–æ–º—è–Ω—É–ª –≤–∞—Å'}\n\n` +
      `–ó–∞—è–≤–∫–∞ #${ticket.id.slice(-6)}\n` +
      `üìù ${ticket.title}\n` +
      `üè¢ ${ticket.service?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üìç ${ticket.location?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É',
            web_app: {
              url: `${this.configService.get('FRONTEND_URL')}/tickets/${ticket.id}`
            }
          }
        ]
      ]
    };

    return this.sendMessage(chatId, message, keyboard);
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –≤ —á–∞—Ç–µ
   */
  async findUserInChat(chatId: string, username: string) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ getChatMember –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const response = await fetch(
        `${this.baseUrl}/getChatMember?chat_id=${chatId}&user_id=@${username}`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );

      if (!response.ok) {
        return null; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
      }

      const data = await response.json();
      
      if (!data.ok) {
        return null;
      }

      return data.result.user;

    } catch (error) {
      this.logger.warn(`User @${username} not found in chat ${chatId}`);
      return null;
    }
  }
}
