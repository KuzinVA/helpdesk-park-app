const https = require('https');

const BOT_TOKEN = '8465643840:AAEWFjl1h-EY3150NgihSG2HAaVYLci14Rk';

console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–∏—Ö —á–∞—Ç–∞—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç...');
console.log(`üîë –¢–æ–∫–µ–Ω: ${BOT_TOKEN.substring(0, 10)}...`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API
function makeRequest(method, data = null) {
    return new Promise((resolve, reject) => {
        const postData = data ? JSON.stringify(data) : '';
        
        const options = {
            hostname: 'api.telegram.org',
            port: 443,
            path: `/bot${BOT_TOKEN}/${method}`,
            method: data ? 'POST' : 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };

        const req = https.request(options, (res) => {
            let responseData = '';
            
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(responseData);
                    if (result.ok) {
                        resolve(result);
                    } else {
                        reject(new Error(`Telegram API error: ${result.description}`));
                    }
                } catch (error) {
                    reject(new Error(`JSON parse error: ${error.message}`));
                }
            });
        });

        req.on('error', (error) => {
            reject(new Error(`Request error: ${error.message}`));
        });

        if (postData) {
            req.write(postData);
        }
        
        req.end();
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
async function getBotInfo() {
    try {
        console.log('üìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ...');
        const response = await makeRequest('getMe');
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', response.result);
        return response.result;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error.message);
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–æ–≤
async function getUpdates() {
    try {
        console.log('üì° –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
        const response = await makeRequest('getUpdates?limit=100');
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.result.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`);
        return response.result;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error.message);
        throw error;
    }
}

// –ê–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∞—Ç–æ–≤
function analyzeUpdates(updates) {
    const chats = new Map();
    
    updates.forEach(update => {
        if (update.message) {
            const chat = update.message.chat;
            if (chat) {
                const chatKey = `${chat.type}_${chat.id}`;
                if (!chats.has(chatKey)) {
                    chats.set(chatKey, {
                        id: chat.id,
                        type: chat.type,
                        title: chat.title || chat.first_name || chat.username || 'Unknown',
                        username: chat.username,
                        first_name: chat.first_name,
                        last_name: chat.last_name
                    });
                }
            }
        }
        
        if (update.my_chat_member) {
            const chat = update.my_chat_member.chat;
            if (chat) {
                const chatKey = `${chat.type}_${chat.id}`;
                if (!chats.has(chatKey)) {
                    chats.set(chatKey, {
                        id: chat.id,
                        type: chat.type,
                        title: chat.title || chat.first_name || chat.username || 'Unknown',
                        username: chat.username,
                        first_name: chat.first_name,
                        last_name: chat.last_name
                    });
                }
            }
        }
    });
    
    return Array.from(chats.values());
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–∞—Ç–æ–≤ –±–æ—Ç–∞...\n');
        
        // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        const botInfo = await getBotInfo();
        console.log(`\nü§ñ –ë–æ—Ç: @${botInfo.username} (${botInfo.first_name})`);
        console.log(`üÜî Bot ID: ${botInfo.id}`);
        console.log(`üë• –ú–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º: ${botInfo.can_join_groups ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`üìñ –ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${botInfo.can_read_all_group_messages ? '–î–∞' : '–ù–µ—Ç'}\n`);
        
        // 2. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updates = await getUpdates();
        
        if (updates.length === 0) {
            console.log('üì≠ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ /start');
            return;
        }
        
        // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç—ã
        const chats = analyzeUpdates(updates);
        
        if (chats.length === 0) {
            console.log('‚ùå –ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö');
            return;
        }
        
        console.log(`\nüéØ –ù–∞–π–¥–µ–Ω–æ ${chats.length} —á–∞—Ç–æ–≤:\n`);
        
        chats.forEach((chat, index) => {
            console.log(`${index + 1}. ${chat.title}`);
            console.log(`   üÜî Chat ID: ${chat.id}`);
            console.log(`   üë• –¢–∏–ø: ${chat.type}`);
            if (chat.username) {
                console.log(`   üîó Username: @${chat.username}`);
            }
            console.log('');
        });
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç–∞–º...\n');
        
        for (const chat of chats) {
            try {
                console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç: ${chat.title} (ID: ${chat.id})`);
                
                // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                const chatInfo = await makeRequest(`getChat?chat_id=${chat.id}`);
                
                if (chatInfo.result) {
                    const chatData = chatInfo.result;
                    console.log(`‚úÖ –î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –µ—Å—Ç—å!`);
                    console.log(`   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${chatData.title || chatData.first_name || 'Unknown'}`);
                    console.log(`   üÜî Chat ID: ${chatData.id}`);
                    console.log(`   üë• –¢–∏–ø: ${chatData.type}`);
                    
                    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    try {
                        const memberCount = await makeRequest(`getChatMemberCount?chat_id=${chat.id}`);
                        console.log(`   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${memberCount.result}`);
                    } catch (error) {
                        console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${error.message}`);
                    }
                    
                    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ —á–∞—Ç–µ
                    try {
                        const botMember = await makeRequest(`getChatMember?chat_id=${chat.id}&user_id=${botInfo.id}`);
                        if (botMember.result) {
                            const member = botMember.result;
                            console.log(`   ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ${member.status}`);
                            console.log(`   üîê –ü—Ä–∞–≤–∞: ${member.status === 'administrator' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–£—á–∞—Å—Ç–Ω–∏–∫'}`);
                        }
                    } catch (error) {
                        console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ: ${error.message}`);
                    }
                    
                    console.log('');
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                    if (chatData.type === 'supergroup' || chatData.type === 'group') {
                        console.log(`üí° –≠—Ç–æ—Ç —á–∞—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è Helpdesk Park!`);
                        console.log(`üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ Chat API:`);
                        console.log(`node chat-api.js`);
                        console.log(`üì° –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API:`);
                        console.log(`curl "http://localhost:3001/api/chat-members?chat_id=${chat.id}"`);
                        console.log('');
                    }
                }
                
            } catch (error) {
                console.log(`‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É ${chat.title}: ${error.message}\n`);
            }
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);
