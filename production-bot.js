const https = require('https');

const BOT_TOKEN = '8465643840:AAEWFjl1h-EY3150NgihSG2HAaVYLci14Rk';
const GITHUB_PAGES_URL = 'https://KuzinVA.github.io/helpdesk-park-app/';

console.log('üöÄ –ó–∞–ø—É—Å–∫ Production –±–æ—Ç–∞ Helpdesk Park...');
console.log(`üîë –¢–æ–∫–µ–Ω: ${BOT_TOKEN.substring(0, 10)}...`);
console.log(`üåê GitHub Pages URL: ${GITHUB_PAGES_URL}`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API
function makeRequest(method, data = null) {
    return new Promise((resolve, reject) => {
        const postData = data ? JSON.stringify(data) : '';
        
        const options = {
            hostname: 'api.telegram.org',
            port: 443,
            path: `/bot${BOT_TOKEN}/${method}`,
            method: data ? 'POST' : 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };

        const req = https.request(options, (res) => {
            let responseData = '';
            
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(responseData);
                    if (result.ok) {
                        resolve(result);
                    } else {
                        reject(new Error(`Telegram API error: ${result.description}`));
                    }
                } catch (error) {
                    reject(new Error(`JSON parse error: ${error.message}`));
                }
            });
        });

        req.on('error', (error) => {
            reject(new Error(`Request error: ${error.message}`));
        });

        if (postData) {
            req.write(postData);
        }
        
        req.end();
    });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId, text, replyMarkup = null) {
    try {
        const data = {
            chat_id: chatId,
            text: text,
            parse_mode: 'HTML'
        };
        
        if (replyMarkup) {
            data.reply_markup = replyMarkup;
        }
        
        const response = await makeRequest('sendMessage', data);
        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
        return response;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error.message);
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStart(chatId) {
    try {
        console.log(`üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
        
        const welcomeText = `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Helpdesk Park!</b>

üöÄ <b>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏</b> –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏
‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

<b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>`;

        const replyMarkup = {
            inline_keyboard: [[
                {
                    text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park',
                    url: GITHUB_PAGES_URL
                }
            ]]
        };
        
        await sendMessage(chatId, welcomeText, replyMarkup);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start:`, error.message);
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
async function handleHelp(chatId) {
    try {
        console.log(`‚ùì –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
        
        const helpText = `üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Helpdesk Park</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/tickets - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–∞—Ö
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.

<b>–í–µ—Ä—Å–∏—è:</b> 2.6.0 (Production)`;
        
        await sendMessage(chatId, helpText);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /help:`, error.message);
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tickets
async function handleTickets(chatId) {
    try {
        console.log(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /tickets –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
        
        const ticketsText = `üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–∞—Ö</b>

<b>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏:</b>
1. –ù–∞–∂–º–∏—Ç–µ /start
2. –í—ã–±–µ—Ä–∏—Ç–µ "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park"
3. –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ó–∞—è–≤–∫–∏"

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

<b>–°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫:</b>
üÜï –ù–æ–≤—ã–µ
üîÑ –í —Ä–∞–±–æ—Ç–µ
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ`;
        
        const replyMarkup = {
            inline_keyboard: [[
                {
                    text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                    url: GITHUB_PAGES_URL
                }
            ]]
        };
        
        await sendMessage(chatId, ticketsText, replyMarkup);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /tickets:`, error.message);
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
async function handleStats(chatId) {
    try {
        console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /stats –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
        
        const statsText = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Helpdesk Park</b>

<b>–°–∏—Å—Ç–µ–º–∞:</b>
üü¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞
üì± –í–µ—Ä—Å–∏—è: 2.6.0
üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Production
üîó URL: ${GITHUB_PAGES_URL}

<b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b>
‚úÖ Telegram Bot API
‚úÖ Chat Integration
‚úÖ Real-time —É—á–∞—Å—Ç–Ω–∏–∫–∏
‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚úÖ Responsive UI

<b>–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>
1. –ù–∞–∂–º–∏—Ç–µ /start
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"`;
        
        const replyMarkup = {
            inline_keyboard: [[
                {
                    text: 'üìä –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                    url: GITHUB_PAGES_URL
                }
            ]]
        };
        
        await sendMessage(chatId, statsText, replyMarkup);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /stats:`, error.message);
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
async function handleCallback(chatId, data) {
    try {
        console.log(`üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback: ${data}`);
        
        switch (data) {
            case 'start_app':
                await handleStart(chatId);
                break;
            case 'help':
                await handleHelp(chatId);
                break;
            case 'tickets':
                await handleTickets(chatId);
                break;
            case 'stats':
                await handleStats(chatId);
                break;
            default:
                console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: ${data}`);
        }
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:`, error.message);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async function getUpdates(offset = 0) {
    try {
        const response = await makeRequest(`getUpdates?offset=${offset}&timeout=30`);
        return response.result;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error.message);
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async function handleUpdate(update) {
    try {
        const { update_id, message, callback_query } = update;
        
        if (message) {
            const { chat, text, from } = message;
            
            if (text) {
                console.log(`üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @${from.username || from.first_name} –≤ —á–∞—Ç–µ ${chat.id}: ${text}`);
                
                switch (text) {
                    case '/start':
                        await handleStart(chat.id);
                        break;
                    case '/help':
                        await handleHelp(chat.id);
                        break;
                    case '/tickets':
                        await handleTickets(chat.id);
                        break;
                    case '/stats':
                        await handleStats(chat.id);
                        break;
                    default:
                        if (text.startsWith('/')) {
                            console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${text}`);
                            await sendMessage(chat.id, `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.`);
                        }
                }
            } else {
                console.log(`üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç @${from.username || from.first_name} –≤ —á–∞—Ç–µ ${chat.id}`);
            }
        }
        
        if (callback_query) {
            const { message, data, from } = callback_query;
            console.log(`üîò Callback –æ—Ç @${from.username || from.first_name}: ${data}`);
            await handleCallback(message.chat.id, data);
        }
        
        return update_id;
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${update.update_id}:`, error.message);
        return update.update_id;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞
async function runBot() {
    let offset = 0;
    
    console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...');
    console.log('üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É @helpdeskParkApp_bot');
    console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥...\n');
    
    while (true) {
        try {
            const updates = await getUpdates(offset);
            
            if (updates && updates.length > 0) {
                console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${updates.length}`);
                
                for (const update of updates) {
                    try {
                        const newOffset = await handleUpdate(update);
                        if (newOffset) {
                            offset = newOffset + 1;
                        }
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${update.update_id}:`, error.message);
                    }
                }
            }
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 5000));
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error.message);
            
            // –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await new Promise(resolve => setTimeout(resolve, 10000));
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
runBot().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
});
