const BOT_TOKEN = '8465643840:AAEWFjl1h-EY3150NgihSG2HAaVYLci14Rk';
let offset = 0;

console.log('ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Helpdesk Park...');
console.log(`üîë –¢–æ–∫–µ–Ω: ${BOT_TOKEN.substring(0, 10)}...`);
console.log(`üåê GitHub Pages URL: https://KuzinVA.github.io/helpdesk-park-app/`);

async function makeRequest(method, data = null) {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/${method}`;
    const options = {
        method: data ? 'POST' : 'GET',
        headers: {
            'Content-Type': 'application/json',
        },
    };

    if (data) {
        options.body = JSON.stringify(data);
    }

    try {
        const response = await fetch(url, options);
        const result = await response.json();
        
        if (!result.ok) {
            console.error(`‚ùå Telegram API error: ${result.description}`);
            return null;
        }
        
        return result;
    } catch (error) {
        console.error(`‚ùå Network error: ${error.message}`);
        return null;
    }
}

async function sendMessage(chatId, text, keyboard = null) {
    const messageData = {
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML'
    };

    if (keyboard) {
        messageData.reply_markup = keyboard;
    }

    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç ${chatId}: ${text.substring(0, 50)}...`);
    
    const result = await makeRequest('sendMessage', messageData);
    if (result) {
        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
        return result.result;
    } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è`);
        return null;
    }
}

async function handleStart(chatId, username = '') {
    console.log(`üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
    
    const welcomeText = `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Helpdesk Park!</b>

üöÄ –≠—Ç–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏.

üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;

            const keyboard = {
            inline_keyboard: [
                [{
                    text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park',
                    url: 'https://KuzinVA.github.io/helpdesk-park-app/'
                }],
                [{
                    text: 'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã',
                    callback_data: 'commands'
                }],
                [{
                    text: '‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                    callback_data: 'about'
                }]
            ]
        };

    return await sendMessage(chatId, welcomeText, keyboard);
}

async function handleCallback(chatId, callbackData) {
    console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback: ${callbackData}`);
    
    let responseText = '';
    
    switch (callbackData) {
        case 'commands':
            responseText = `üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

üöÄ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
üìã /tickets - –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
‚ûï /create - –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üë§ /profile - –ü—Ä–æ—Ñ–∏–ª—å
‚ùì /help - –ü–æ–º–æ—â—å`;
            break;
            
        case 'about':
            responseText = `‚ÑπÔ∏è <b>–û Helpdesk Park:</b>

üéØ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏
üåê Telegram Mini App
üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
üì± –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
üé® –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–º Telegram`;
            break;
            
        default:
            responseText = `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${callbackData}`;
    }
    
    return await sendMessage(chatId, responseText);
}

async function getUpdates() {
    try {
        console.log(`üì° –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (offset: ${offset})...`);
        
        const response = await makeRequest(`getUpdates?offset=${offset}&timeout=30`);
        
        if (!response || !response.result) {
            console.log('üì≠ –ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
            return;
        }

        const updates = response.result;
        console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${updates.length}`);

        for (const update of updates) {
            try {
                console.log(`üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID: ${update.update_id}`);
                
                if (update.message) {
                    const { chat, text, from } = update.message;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if (text) {
                        console.log(`üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @${from.username || from.first_name} –≤ —á–∞—Ç–µ ${chat.id}: ${text}`);
                        
                        if (text === '/start') {
                            await handleStart(chat.id, from.username);
                        } else if (text.startsWith('/')) {
                            await sendMessage(chat.id, `‚ùì –ö–æ–º–∞–Ω–¥–∞ ${text} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.`);
                        }
                    } else {
                        console.log(`üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç @${from.username || from.first_name} –≤ —á–∞—Ç–µ ${chat.id} (—Ç–∏–ø: ${update.message.message_type || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})`);
                    }
                } else if (update.callback_query) {
                    const { data, from, message } = update.callback_query;
                    console.log(`üîÑ Callback –æ—Ç @${from.username || from.first_name}: ${data}`);
                    
                    await handleCallback(message.chat.id, data);
                }
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º offset —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
                if (update.update_id >= offset) {
                    offset = update.update_id + 1;
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${update.update_id}: ${error.message}`);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            }
        }
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${error.message}`);
    }
}

async function runBot() {
    console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...');
    console.log('üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É @helpdeskParkApp_bot');
    console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥...');
    
            // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        await getUpdates();
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        setInterval(async () => {
            try {
                await getUpdates();
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: ${error.message}`);
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º offset –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
                offset = 0;
            }
        }, 5000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
runBot().catch(error => {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
});
