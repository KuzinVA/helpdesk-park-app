const http = require('http');
const fs = require('fs');
const path = require('path');

const PORT = process.env.PORT || 8080;

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ñ–∞–π–ª—ã
function createProductionFiles() {
    console.log('üìÅ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ñ–∞–π–ª—ã...');
    
    try {
        // –ö–æ–ø–∏—Ä—É–µ–º production.html –∫–∞–∫ index.html
        const productionContent = fs.readFileSync('frontend/production.html', 'utf8');
        fs.writeFileSync('index.html', productionContent);
        console.log('‚úÖ index.html —Å–æ–∑–¥–∞–Ω');
        
        // –ö–æ–ø–∏—Ä—É–µ–º simple-test.html –∫–∞–∫ test.html
        const testContent = fs.readFileSync('frontend/simple-test.html', 'utf8');
        fs.writeFileSync('test.html', testContent);
        console.log('‚úÖ test.html —Å–æ–∑–¥–∞–Ω');
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π README
        const readmeContent = `# üöÄ Helpdesk Park - Telegram Mini App

## üåê –î–µ–º–æ

- [–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ](http://localhost:${PORT}/)
- [–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞](http://localhost:${PORT}/test.html)

## üì± Telegram –±–æ—Ç

@helpdeskParkApp_bot

## üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏
- ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
- üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
- üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

## üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

- HTML5 + CSS3 + JavaScript
- Telegram WebApp API
- Tailwind CSS
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
`;
        
        fs.writeFileSync('README.md', readmeContent);
        console.log('‚úÖ README.md —Å–æ–∑–¥–∞–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', error.message);
        process.exit(1);
    }
}

// MIME —Ç–∏–ø—ã
const mimeTypes = {
    '.html': 'text/html',
    '.js': 'text/javascript',
    '.css': 'text/css',
    '.json': 'application/json',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.ico': 'image/x-icon'
};

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer((req, res) => {
    const parsedUrl = new URL(req.url, `http://localhost:${PORT}`);
    let pathname = parsedUrl.pathname;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å
    if (pathname === '/') {
        pathname = '/index.html';
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const ext = path.extname(pathname);
    const mimeType = mimeTypes[ext] || 'text/plain';
    
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    let filePath = path.join(__dirname, pathname);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(filePath)) {
        res.writeHead(404, { 'Content-Type': 'text/html' });
        res.end(`
            <!DOCTYPE html>
            <html>
            <head>
                <title>404 - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</title>
                <meta charset="utf-8">
                <style>
                    body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                    .error { color: #e74c3c; font-size: 72px; margin-bottom: 20px; }
                    .message { color: #2c3e50; font-size: 18px; margin-bottom: 30px; }
                    .link { color: #3498db; text-decoration: none; }
                    .link:hover { text-decoration: underline; }
                </style>
            </head>
            <body>
                <div class="error">404</div>
                <div class="message">–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
                <a href="/" class="link">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
            </body>
            </html>
        `);
        return;
    }
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    fs.readFile(filePath, (err, data) => {
        if (err) {
            res.writeHead(500, { 'Content-Type': 'text/html' });
            res.end('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        res.writeHead(200, { 
            'Content-Type': mimeType,
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type'
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        res.end(data);
    });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
function startServer() {
    server.listen(PORT, () => {
        console.log(`üöÄ –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:${PORT}`);
        console.log(`üåê –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è Telegram –±–æ—Ç–∞: http://localhost:${PORT}`);
        console.log(`\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:`);
        console.log(`   ‚Ä¢ / - –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (index.html)`);
        console.log(`   ‚Ä¢ /test.html - –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞`);
        console.log(`\nüì± –î–ª—è Telegram –±–æ—Ç–∞:`);
        console.log(`   1. –û–±–Ω–æ–≤–∏—Ç–µ URL –≤ setup-miniapp.js: http://localhost:${PORT}`);
        console.log(`   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node setup-miniapp.js`);
        console.log(`   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram`);
        console.log(`\n‚ö†Ô∏è  –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∑–∞–º–µ–Ω–∏—Ç–µ localhost –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL`);
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
server.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});

process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    console.log('üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Helpdesk Park...\n');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ñ–∞–π–ª—ã
    createProductionFiles();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    startServer();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
main();
