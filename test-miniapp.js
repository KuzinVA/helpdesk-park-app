const https = require('https');

const BOT_TOKEN = '8465643840:AAEWFjl1h-EY3150NgihSG2HAaVYLci14Rk';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API
function makeRequest(method, data = null) {
    return new Promise((resolve, reject) => {
        const postData = data ? JSON.stringify(data) : '';
        
        const options = {
            hostname: 'api.telegram.org',
            port: 443,
            path: `/bot${BOT_TOKEN}/${method}`,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };

        const req = https.request(options, (res) => {
            let responseData = '';
            
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(responseData);
                    if (result.ok) {
                        resolve(result.result);
                    } else {
                        reject(new Error(`Telegram API error: ${result.description}`));
                    }
                } catch (error) {
                    reject(new Error(`Failed to parse response: ${error.message}`));
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (postData) {
            req.write(postData);
        }
        
        req.end();
    });
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Mini App
async function testMiniApp() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Mini App...\n');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
        console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã...');
        const commands = await makeRequest('getMyCommands');
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω—ã:', commands);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é
        console.log('\nüçî –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é...');
        const menuButton = await makeRequest('getChatMenuButton');
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é:', menuButton);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å Mini App –∫–Ω–æ–ø–∫–æ–π
        console.log('\nüì± –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å Mini App –∫–Ω–æ–ø–∫–æ–π...');
        
        const testMessage = {
            chat_id: 'YOUR_CHAT_ID', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id
            text: 'üß™ –¢–µ—Å—Ç Mini App –∫–Ω–æ–ø–∫–∏',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park',
                            web_app: {
                                url: 'https://KuzinVA.github.io/helpdesk-park-app/'
                            }
                        }
                    ]
                ]
            }
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
        console.log('‚ö†Ô∏è  –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ–Ω–∏—Ç–µ YOUR_CHAT_ID –Ω–∞ –≤–∞—à chat_id');
        console.log('üìù –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id:');
        console.log('   curl "https://api.telegram.org/bot' + BOT_TOKEN + '/getUpdates"');
        
        console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
        console.log('\nüì± –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Mini App:');
        console.log('1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start');
        console.log('2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park"');
        console.log('3. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å—Å—è –∫–∞–∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π Mini App');
        
    } catch (error) {
        console.error('\nüí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testMiniApp();
