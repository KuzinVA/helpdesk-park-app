const TelegramBot = require('node-telegram-bot-api');

// –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const token = '8465643840:AAEWFjl1h-EY3150NgihSG2HAaVYLci14Rk';
const bot = new TelegramBot(token, { polling: true }); // –í–∫–ª—é—á–∞–µ–º polling –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

// URL Mini App
const MINI_APP_URL = 'https://kuzinva.github.io/helpdesk-park-app/';

async function setupBotWithMenu() {
  try {
    console.log('ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞ —Å –º–µ–Ω—é –¥–ª—è Mini App...');
    console.log('');

    // 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    const commands = [
      { command: 'start', description: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park' },
      { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' },
      { command: 'app', description: 'üì± –û—Ç–∫—Ä—ã—Ç—å Mini App' },
      { command: 'menu', description: 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é' }
    ];

    await bot.setMyCommands(commands);
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:');
    commands.forEach(cmd => {
      console.log(`   ‚Ä¢ /${cmd.command} - ${cmd.description}`);
    });

    // 2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è Mini App
    try {
      await bot.setChatMenuButton({
        type: 'web_app',
        text: 'üöÄ Helpdesk Park',
        web_app: { url: MINI_APP_URL }
      });
      console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: üöÄ Helpdesk Park');
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –º–µ–Ω—é:', error.message);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    try {
      const botInfo = await bot.getMe();
      console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞:');
      console.log(`   ‚Ä¢ –ò–º—è: ${botInfo.first_name}`);
      console.log(`   ‚Ä¢ Username: @${botInfo.username}`);
      console.log(`   ‚Ä¢ ID: ${botInfo.id}`);
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ');
    }

    console.log('');
    console.log('üéâ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    console.log('üåê URL Mini App:', MINI_APP_URL);
    console.log('');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:', error.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.first_name;
  
  const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${username}!

üé† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **Helpdesk Park** - —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –ø–∞—Ä–∫–∞ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤!

üöÄ **–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:**
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞—è–≤–∫–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üì± **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park" –Ω–∏–∂–µ
2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º

üéØ **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!`;

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park',
          web_app: { url: MINI_APP_URL }
        }
      ],
      [
        { text: 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', callback_data: 'my_tickets' },
        { text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'create_ticket' }
      ],
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
        { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }
      ],
      [
        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
      ]
    ]
  };

  await bot.sendMessage(chatId, welcomeMessage, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
});

bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  
  const helpMessage = `‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Helpdesk Park**

üöÄ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ /menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üì± **–ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å Mini App:**
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park"
2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu

üéØ **–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**
‚Ä¢ üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏
‚Ä¢ ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º
‚Ä¢ üîî –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üåê **–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:**
${MINI_APP_URL}

üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!`;

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park',
          web_app: { url: MINI_APP_URL }
        }
      ],
      [
        { text: 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', callback_data: 'my_tickets' },
        { text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'create_ticket' }
      ],
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
        { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }
      ]
    ]
  };

  await bot.sendMessage(chatId, helpMessage, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
});

bot.onText(/\/menu/, async (msg) => {
  const chatId = msg.chat.id;
  
  const menuMessage = `üìã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Helpdesk Park**

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:`;

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park',
          web_app: { url: MINI_APP_URL }
        }
      ],
      [
        { text: 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', callback_data: 'my_tickets' },
        { text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'create_ticket' }
      ],
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
        { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }
      ],
      [
        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
      ]
    ]
  };

  await bot.sendMessage(chatId, menuMessage, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
});

bot.onText(/\/app/, async (msg) => {
  const chatId = msg.chat.id;
  
  const appMessage = `üì± **–û—Ç–∫—Ä—ã—Ç–∏–µ Helpdesk Park Mini App**

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Helpdesk Park',
          web_app: { url: MINI_APP_URL }
        }
      ]
    ]
  };

  await bot.sendMessage(chatId, appMessage, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  switch (data) {
    case 'my_tickets':
      await bot.sendMessage(chatId, 'üìã **–ú–æ–∏ –∑–∞—è–≤–∫–∏**\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: MINI_APP_URL }
              }
            ]
          ]
        }
      });
      break;

    case 'create_ticket':
      await bot.sendMessage(chatId, '‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏**\n\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: MINI_APP_URL }
              }
            ]
          ]
        }
      });
      break;

    case 'stats':
      await bot.sendMessage(chatId, 'üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: MINI_APP_URL }
              }
            ]
          ]
        }
      });
      break;

    case 'profile':
      await bot.sendMessage(chatId, 'üë§ **–ü—Ä–æ—Ñ–∏–ª—å**\n\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: MINI_APP_URL }
              }
            ]
          ]
        }
      });
      break;

    case 'help':
      await bot.sendMessage(chatId, '‚ùì **–ü–æ–º–æ—â—å**\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: MINI_APP_URL }
              }
            ]
          ]
        }
      });
      break;
  }

  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
  await bot.answerCallbackQuery(callbackQuery.id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
});

// –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –±–æ—Ç–∞
console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
setupBotWithMenu().then(() => {
  console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
  console.log('üì± –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã');
  console.log('üåê Mini App URL:', MINI_APP_URL);
  console.log('');
  console.log('üîß –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
});
