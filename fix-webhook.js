const https = require('https');

const BOT_TOKEN = '8465643840:AAEWFjl1h-EY3150NgihSG2HAaVYLci14Rk';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API
function makeRequest(method, data = null) {
    return new Promise((resolve, reject) => {
        const postData = data ? JSON.stringify(data) : '';
        
        const options = {
            hostname: 'api.telegram.org',
            port: 443,
            path: `/bot${BOT_TOKEN}/${method}`,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };

        const req = https.request(options, (res) => {
            let responseData = '';
            
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(responseData);
                    if (result.ok) {
                        resolve(result.result);
                    } else {
                        reject(new Error(`Telegram API error: ${result.description}`));
                    }
                } catch (error) {
                    reject(new Error(`Failed to parse response: ${error.message}`));
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (postData) {
            req.write(postData);
        }
        
        req.end();
    });
}

// –£–¥–∞–ª—è–µ–º webhook
async function deleteWebhook() {
    try {
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º webhook...');
        const result = await makeRequest('deleteWebhook');
        console.log('‚úÖ Webhook —É–¥–∞–ª–µ–Ω:', result);
        return result;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook:', error.message);
        throw error;
    }
}

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
async function getWebhookInfo() {
    try {
        console.log('üì° –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook...');
        const result = await makeRequest('getWebhookInfo');
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:', result);
        return result;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook:', error.message);
        throw error;
    }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
async function testBot() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞...');
        const result = await makeRequest('getMe');
        console.log('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç:', result);
        return result;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞:', error.message);
        throw error;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function fixWebhook() {
    try {
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å webhook...\n');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        await getWebhookInfo();
        
        // –£–¥–∞–ª—è–µ–º webhook
        await deleteWebhook();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
        await testBot();
        
        console.log('\nüéâ Webhook –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.');
        console.log('\nüì± –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:');
        console.log('1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å /start –±–æ—Ç—É');
        console.log('2. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å');
        console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        
    } catch (error) {
        console.error('\nüí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ webhook:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixWebhook();
